% Generated by roxygen2 (4.0.2): do not edit by hand
\name{dfCount}
\alias{dfCount}
\title{Count number of rows per group}
\usage{
dfCount(df, col, sort = TRUE, name = "total")
}
\arguments{
\item{df}{A data.frame.}

\item{col}{The column to count.}

\item{sort}{Whether or not to sort the resulting total column.}

\item{name}{The name of the total column.}
}
\value{
A data.frame with two columns: The first column is the distinct
  values of the given variable, the second column shows the total number of
  rows with that value.
}
\description{
Tabulate how many times each distinct value of a specific column gets
repeated.
}
\details{
\code{dfCount(x, "y")} is similar in functionality to \code{table(x$y)}, but
performs better on large datasets (according to my not-so-thorough testing).

There are two main differences between \code{dfCount} and \code{table}:

1. \code{dfCount} returns a \code{data.frame} instead of \code{table}
     object

2. \code{dfCount} includes a row for number of NA observations, whereas
     \code{table} does not by default
}
\note{
The \code{dplyr} package is required for this function.
}
\section{Performance}{

This function performs much faster than its equivalent \code{table} call on
large datasets, even though the \code{table} function does not sort the
results.

For example, with the following data.frame

\code{df <- data.frame(a = rep(1:50, 100000))}

running \code{dfCount(df, "a")} on my machine 100 times is, on average, 10x
faster than \code{table(df$a)} (217 milliseconds vs 2112 milliseconds).

See the package vignette for more benchmarking analysis.
}
\examples{
if (requireNamespace("nycflights13::", quietly = TRUE)) {
  flights <- nycflights13::flights
  dfCount(flights, "dest")
  dfCount(flights, "dest", sort = FALSE)
  dfCount(flights, "dest", name = "flights")
}
}
\seealso{
\code{\link{plotCount}}
}

